import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:mrs_panipuri/model/product.dart';
import 'package:mrs_panipuri/model/user.dart';

import 'bill.dart';

// Create an instance for FirebaseFirestore
final FirebaseFirestore _firebaseFireStore = FirebaseFirestore.instance;
// Create variables to access the corressponding collections with the help of the instance
final CollectionReference _productcr =
    _firebaseFireStore.collection('Products');
final CollectionReference _billcr = _firebaseFireStore.collection('Bills');
final CollectionReference _ucr = _firebaseFireStore.collection('Users');

class FirebaseHelper {
  // Products CRUD Methods
  //insert data
  static Future insertProduct(Product product) async {
    try {
      // This " _productcr.doc().id " will return an autogenerated string value.
      String id = _productcr.doc().id;
      await _productcr.doc(id).set(<String, dynamic>{
        'id': id,
        'name': product.name,
        'price': product.price,
        'quantity': 0
      });
    } catch (e) {
      throw (e.toString());
    }
  }

  //Update data
  static Future updateProduct(String id, String name, double cost) async {
    try {
      await _productcr.doc(id).set(<String, dynamic>{
        'id': id,
        'name': name,
        'price': cost,
        'quantity': 0
      });
    } catch (e) {
      throw (e.toString());
    }
  }

  //Read data
  static Stream<List<Product>> readProducts() {
    try {
      return _productcr.snapshots().map((snapshot) => snapshot.docs
          .map((element) =>
              Product.fromJson(element.data() as Map<String, dynamic>))
          .toList());
    } catch (e) {
      throw (e.toString());
    }
  }

  static Future<List<Product>> readProductsAsList(Stream<List<Product>> productstream) async{
    List<Product> plist = [];    
     productstream.listen((event) {
      for (int j = 0; j < event.length; j++) {
         plist.add(event[j]);
      }
      plist.sort(((a, b) => a.name.compareTo(b.name)));
    });
    //plist.sort(((a, b) => a.name.compareTo(b.name)));
    return  plist;
  }

  //Delete data
  static deleteProduct(String id) {
    try {
      _productcr.doc(id).delete();
    } catch (e) {
      throw (e.toString());
    }
  }

  //Bills CRUD Methods
  //insert data
  static Future insertBill(
      List<Product> products, double cost, String dt, String pm) async {
    try {
      String id = _billcr.doc().id;
      await _billcr.doc(id).set(<String, dynamic>{
        'id': id,
        'products': products.map((prod) => prod.toJson()).toList(),
        'cost': cost,
        'Date': dt,
        'paymentMode': pm
      });
      return id;
    } catch (e) {
      throw (e.toString());
    }
  }

  //Update data
  static Future updateBill(String id, List<Product> products, double cost,
      String dt, String pm) async {
    try {
      await _billcr.doc(id).update(<String, dynamic>{
        'id': id,
        'products': products.map((prod) => prod.toJson()).toList(),
        'cost': cost,
        'Date': dt,
        'paymentMode': pm
      });
    } catch (e) {
      throw (e.toString());
    }
  }

  //Read data
  static Stream<List<Bill>> readBills() {
    try {
      return _billcr.snapshots().map((snapshot) => snapshot.docs
          .map((element) =>
              Bill.fromJson(element.data() as Map<String, dynamic>))
          .toList());
    } catch (e) {
      throw (e.toString());
    }
  }

  //Delete data
  static deleteBill(String id) {
    try {
      _billcr.doc(id).delete();
    } catch (e) {
      throw (e.toString());
    }
  }

  // Users CRUD Methods
  //insert data
  static Future insertUser(String name, String pass, bool isadmin) async {
    try {
      _ucr.doc(name).set(<String, dynamic>{
        'username': name,
        'password': pass,
        'isadmin': isadmin
      });
    } catch (e) {
      throw (e.toString());
    }
  }

  //Update data
  static Future updateUser(
      String oldName, String newName, String pass, bool isadmin) async {
    try {
      _ucr.doc(oldName).update(<String, dynamic>{
        'username': newName,
        'password': pass,
        'isadmin': isadmin
      });
    } catch (e) {
      throw (e.toString());
    }
  }

  //Read data
  static Stream<List<User>> readUsers() {
    try {
      return _ucr.snapshots().map((snapshot) => snapshot.docs
          .map((element) =>
              User.fromJson(element.data() as Map<String, dynamic>))
          .toList());
    } catch (e) {
      throw (e.toString());
    }
  }

// Read a single user and check if it is valid (While Logging into the app).
  static Future<User?> readUser(String id) async {
    try {
      var doc = _ucr.doc(id).get();
      var user = doc.then((value) {
        if (value.data() != null) {
          return User.fromJson(value.data() as Map<String, dynamic>);
        } else {
          return null;
        }
      });
      return user;
    } catch (e) {
      throw (e.toString());
    }
  }

  //Delete data
  static Future deleteUser(String id) async {
    try {
      _ucr.doc(id).delete();
    } catch (e) {
      throw (e.toString());
    }
  }
}
